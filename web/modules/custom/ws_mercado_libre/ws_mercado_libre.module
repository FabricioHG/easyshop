<?php

use Drupal\devel\Plugin\Devel\Dumper\Kint;
use Drupal\Component\Utility\Html;
use Drupal\file\Entity\File;


/**
 * @file
 * Primary module hooks for WS Mercado Libre module.
 */

function ws_mercado_libre_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id){
	if ($form_id === "commerce_product_default_add_form") {
		$base_form = $form_state->getBuildInfo()['base_form_id'];
		$form['#attached']['library'][] = 'ws_mercado_libre/ws_mercado_libre.callajax';
		//Obtener el valor del campo de cada usuario para saber si quiere publicar en ML
		$storage_user = \Drupal::entityTypeManager()->getStorage('user');
		$current_user_id = \Drupal::currentUser()->id();
		$node_user = $storage_user->load($current_user_id);
		$publicar_en_ml = $node_user->get('field_publish_products')->value;
		
		if($publicar_en_ml === "1"){
			//obtener campos obligatorios (atributos)
			$servicio_ml = \Drupal::service('ws_mercado_libre.mercadolibre_service');
			
			/*Hacer que el titulo funcione con ajax*/
			$form['title']['widget'][0]['value']['#ajax']=[
				'callback' => 'backCategoria',
				'wrapper' => 'contdatosml',
				'event' => 'blur',
				'progress' => [
						'type' => 'throbber',
						'message' => 'Prediciendo categoria...',
					],

			];
			
			//Hacer contenedor de campos de mercado libre
			$form['cont_datos_ml']=[
				'#type'=>'fieldset',
				'#title' => "Datos Para publicar en Mercado Libre",
				'#attributes' => ['id' => 'contdatosml'],
				'#weight'=>20,
			];
			$form['cont_datos_ml']['cont_categoria_ml']=[
				'#type'=>'container',
				'#attributes' => ['id' => 'idcategoriaml'],

			];
			$form['cont_datos_ml']['cont_atributos_ml']=[
				'#type'=>'container',
				'#attributes' => ['id' => 'idatributosml'],
			];	
			// Configurar las opciones iniciales para el select.        	
			$form['cont_datos_ml']['cont_categoria_ml']['categoria_ml'] = [
				'#type'=> 'select',
				'#title'=> 'Categoria en Mercado libre',
				'#default_value'=>"",
				'#options' => $form_state->get('categorias') ?? ["" => '- Seleccione una opción -'],
				'#validated' => TRUE,
				'#required'=> TRUE,
				'#ajax'=>[
					'callback' => 'backAtributos',
					'wrapper' => 'idatributosml',
					'event' => 'change',
					'progress' => [
							'type' => 'throbber',
							'message' => 'Obteniendo atributos obligatorios de la categoria...',
						],
				],
			];
			$form['cont_datos_ml']['cont_atributos_ml']['atributos_impli']=[
				'#type'=>'hidden',
				'#value' => $form_state->getValue(['cont_datos_ml','cont_atributos_ml','atributos_impli']) ?? '',
				'#parents' => ['cont_datos_ml','cont_atributos_ml','atributos_impli'],
			
			];
			$form['cont_datos_ml']['precio_producto_ml'] = [
				'#type' => 'commerce_price',
				'#title' => 'Precio en Mercado Libre',
				'#default_value' => [
					'number' => '0.00',
					'currency_code'=> 'MXN',
				],
				'#weight'=>20,
			];

			
			
			// 	RECONSTRUIR EL FORMULARIO SI ESTA DENTRO DEL AJAX PARA QUE EL FORM AGREGUE LOS CAMPOS NUEVOS
			if ($form_state->getTriggeringElement()['#name'] === "cont_datos_ml[cont_categoria_ml][categoria_ml]" ) {
				if ($form_state->isRebuilding()) {
					$codigo_cat = $form_state->getValue(['cont_datos_ml', 'cont_categoria_ml', 'categoria_ml']);
					
					$atributos_implicitos_json = $form_state->getUserInput()['cont_datos_ml']['cont_atributos_ml']['atributos_impli'];
					$decode_categoria = json_decode($atributos_implicitos_json, true);
					$atributos_cat_selecionada = $decode_categoria[$codigo_cat];

					/* Obtener atributos obligatorios de la categoria seleccionada */
					$service_ml = \Drupal::service('ws_mercado_libre.mercadolibre_service');
					$atributos_obligatorios = $service_ml->obtener_attr_obligatorios($codigo_cat);
					$atributos_finales = [];
					/*Hacer un solo array de atributos obligatorios, predictores, conditional_required con sus valores en caso de que los requieran */
					//Comenzamos a recorrer el array de atributos obligatorios para ver si existe un valor obligatorio en los predecidos y dejar el valor predecido
					if (count($atributos_cat_selecionada) > 0) {
						foreach ($atributos_obligatorios as $key => $value) {
						//Revisar si el campo obligatorio existe en los atributos predecidos
							foreach ($atributos_cat_selecionada as $key => $value_cat_selec) {
								if ($value['id'] === $value_cat_selec['id']) {
									//hacer campo con atributo obligatorio relleno con el valor predecido
									array_push($atributos_finales, $value_cat_selec);
									break;
								}else{
									//hacer campo con atributo obligatorio sin relleno
									array_push($atributos_finales, $value);
									break;
								}	
							}
						}
					}else{
						$atributos_finales = $atributos_obligatorios;
					}
					//Recorremos el array de $atributos_finales revisando si hizo falta uno de los atributos predecidos
					if (count($atributos_cat_selecionada) > 0) {
						foreach ($atributos_cat_selecionada as $value) {
							foreach ($atributos_finales as $value_attr_finales) {
								if ($atributos_cat_selecionada['id'] === $value_attr_finales['id'] ) {
									break;
								}else{
									array_push($atributos_finales, $value);
									break;
								}
							}
						}
					}
					//Eliminar los array Repetidos
					$temp = [];
					$atributos_finales_sin_repetir = [];
					foreach ($atributos_finales as $item) {
						if (!isset($temp[$item['id']])) {
							$temp[$item['id']] = true; // Marca el ID como procesado
							$atributos_finales_sin_repetir[] = $item;         // Agrega el elemento al resultado
						}
					}

					//Hacer campos del formulario segun los datos obtenidos de mercado libre
					foreach ($atributos_finales_sin_repetir as $atributo_sin_rep) {
						//Revisar si tiene values para hacer un select sino solo hacer campo de texto
						if (isset($atributo_sin_rep['values']) && !empty($atributo_sin_rep['values'])) {
							//hacer campo select con los nombres como valores
							$form['cont_datos_ml']['cont_atributos_ml'][$atributo_sin_rep['id']] = [
								'#type' => 'select',
								'#title' => $atributo_sin_rep['name'],
								'#options' => ['' => '- Select an option -'],
								'#parents' => ['cont_datos_ml', 'cont_atributos_ml', $atributo_sin_rep['id']],
								'#required' => (isset($atributo_sin_rep['required']) && $atributo_sin_rep['required'] === "required") ? TRUE : FALSE,

							];
							
							//si el campo es EMPTY_GTIN_REASON llenar los valores con los 'Id' como valores a enviar
							if($atributo_sin_rep['id']==="EMPTY_GTIN_REASON"){
								foreach ($atributo_sin_rep['values'] as $val_sel) {
									$form['cont_datos_ml']['cont_atributos_ml'][$atributo_sin_rep['id']]['#options'][$val_sel['id']] = $val_sel['name'];
								}
							}else{
								//Con esto llenamos los valores del select con los 'nombres' como valores a enviar
								foreach ($atributo_sin_rep['values'] as $val_sel) {
									$form['cont_datos_ml']['cont_atributos_ml'][$atributo_sin_rep['id']]['#options'][$val_sel['name']] = $val_sel['name'];
								}
							}
							  
						}else{
							//Hacer campo de texto
							$form['cont_datos_ml']['cont_atributos_ml'][$atributo_sin_rep['id']] = [
								'#type' => 'textfield',	
								'#title' => $atributo_sin_rep['name'],
								'#default_value' => $atributo_sin_rep['value_name'],
								'#parents' => ['cont_datos_ml', 'cont_atributos_ml', $atributo_sin_rep['id']],
								'#required' => (isset($atributo_sin_rep['required']) && $atributo_sin_rep['required'] === "required") ? TRUE : FALSE,

							];
						}
						
					}
					// \Drupal::logger('debug')->notice('atributos predictor: %attr_pre',['%attr_pre'=>print_r(json_encode($atributos_cat_selecionada), true)]);
					// \Drupal::logger('debug')->notice('atributos obligatorios: %attr_obl',['%attr_obl'=>print_r(json_encode($atributos_obligatorios), true)]);
					// \Drupal::logger('debug')->notice('codigo de categoria seleccionada : %codigo_cat',['%codigo_cat'=>print_r(json_encode($codigo_cat), true)]);
					// \Drupal::logger('debug')->notice('Atributos finales : %attr_fin',['%attr_fin'=>print_r(json_encode($atributos_finales), true)]);
					// \Drupal::logger('debug')->notice('Atributos finales sin repetir : %attr_fin',['%attr_fin'=>print_r(json_encode($atributos_finales_sin_repetir), true)]);
				}
					
			}

			$form['#validate'][] = 'limpiarCamposNuevos';
			
			$form['actions']['submit']['#submit'][] = 'enviar_producto_ml';

		}
	}
	
}

function backCategoria(array &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
     $titulo = $form_state->getValue('title')[0]['value'];
     if (preg_match('/[a-zA-Z]/', $titulo)) {
     	$titulo = $titulo;
     }
     else{
     	$titulo = 'Otro';
     }
     $service_ml = \Drupal::service('ws_mercado_libre.mercadolibre_service');
     $categorias = $service_ml->predecir_categoria($titulo);
     $form_state->set('categorias', $categorias);
	 /**En la funcion de recibir categorias agregar tambien los atributos en el mismo array que devuelve la funcion */

	 $form['cont_datos_ml']['cont_atributos_ml']['atributos_impli']['#value'] = json_encode($categorias['atributos_implicitos']);
	 $form['cont_datos_ml']['cont_categoria_ml']['categoria_ml']['#options'] = $categorias['categoria_select'] = ['' => '- Seleccione una opción -'] + $categorias['categoria_select'];
     $form_state->setRebuild(TRUE);
     return $form['cont_datos_ml'];
}

function backAtributos(array &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
	
	$form['cont_datos_ml']['cont_atributos_ml']['atributos_impli']['#value'] = $form_state->getUserInput()['cont_datos_ml']['cont_atributos_ml']['atributos_impli'];
	$form_state->setRebuild(TRUE);	
 	
	return $form['cont_datos_ml']['cont_atributos_ml'];
}

function limpiarCamposNuevos(array &$form, \Drupal\Core\Form\FormStateInterface $form_state){
	/* Este codigo si funciona, es para limpiar los campos que llena el usuario, para que no inyecten codigo, pero en este caso
	is igual si lo usamos o no, cuando lo usamos es para obtener los datos con el $form_state asi $form_state->getValue('nombre de campo dinamico'),
	Cuadno limpiamos los campos podemos obtener los valores con $form_state

	*/
	 	//  $input = $form_state->getUserInput();
		//  $campos_atributos = $input['cont_datos_ml']['cont_atributos_ml'];
		//  foreach ($campos_atributos as $key => $campo) {
		// 	$campo_limpio = Html::escape($campo);
		// 	$form_state->setValue(['cont_datos_ml', 'cont_atributos_ml', $campo], $campo_limpio);
		// }
	    
}

function enviar_producto_ml(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
	/* Obtener las imagenes con el entity_manager de files */
	/*Obtener los id de las imagenes */
	$files_storage = \Drupal::entityTypeManager()->getStorage('file');
	$fids = array_map(function ($campo) {
		return $campo['fids'][0];
	}, $form_state->getValue('field_imagen'));
	$campos_imagen = $files_storage->loadMultiple($fids);
    /*Ya cargadas las entidades de las imagenes, obtener el url complero con dominio para agregar en el campo picture de ML */
	$file_url = \Drupal::service('file_url_generator');
	foreach ($campos_imagen as $key => $campo_img) {
		$ulrs_img[] = [
			'source' => $file_url->generateAbsoluteString($campo_img->getFileUri()),
		]; 
	}
	/*obtener valores de los atributos generados automaticamente para agregarlos a ML*/
	$atributos_array = $form_state->getValue('cont_datos_ml')['cont_atributos_ml'];
	unset($atributos_array["atributos_impli"]);
	foreach ($atributos_array as $key => $attr) {
		//si el atributo es EMPTY_GTIN_REASON, cambiar la clave 'value_name' por value_id 
		if($key==='EMPTY_GTIN_REASON'){
			$atributos[] = [
				'id' => $key,
				'value_id' => $attr,
			];
		}else{
			//Si es otro atributo diferente dejar la clave como value_name
			$atributos[] = [
				'id' => $key,
				'value_name' => $attr,
			];
		}
	}
	if (empty($atributos)) {
		$atributos = array();
	}	

	 //kint($atributos);
	 //exit;

        		/*obtener datos del formulario y hacer el array con los datos para enviar a la funcion*/
				$data_product['title'] = $form_state->getValue('title')[0]['value'];
				$data_product['category_id'] = $form_state->getValue('cont_datos_ml')['cont_categoria_ml']['categoria_ml'];
				$data_product['price'] = $form_state->getValue('cont_datos_ml')['precio_producto_ml']['number'];
				$data_product['currency_id'] = 'MXN';
				$data_product['available_quantity'] = 20;
				$data_product['buying_mode'] = 'buy_it_now';
				$data_product['condition'] = 'new';
				$data_product['description'] = $form_state->getValue('body')[0]['value'];
				$data_product['listing_type_id'] = 'gold_special';
				$data_product['pictures'] = $ulrs_img;
				$data_product['attributes'] = $atributos;

        		/*Llamar al servicio de mercado libre para apublicar pasando un array con los datos del producto*/
        		
				$service_ml = \Drupal::service('ws_mercado_libre.mercadolibre_service');
        		$service_ml->publicarArticulo($data_product);
}



